class Solution {
    public boolean search(int[] nums, int target) 
    {
        int peak=findPeakElement(nums);
        if(peak==-1)
            return (findInSequence(nums,0,nums.length-1,target));
        boolean res=findInSequence(nums,0,peak,target);
        if(res==false){
            res=findInSequence(nums,peak+1,nums.length-1,target);
            return res;
        }
        else
            return res;
    }
      public boolean findInSequence(int num[],int l,int h,int target){
          int mid = 0;
            while (l <= h) {
                mid = (l + h) / 2;
        mid = (l + h) / 2;
        if (num[mid] == target)
           return true;
        else if (num[mid] < target)
            l = mid + 1;
         else
             h=mid-1;       
    }
    
    return false;
    }
       public int findPeakElement(int[] num) 
       {
         // if (num.length <= 1)
         //     return -1;
    int mid = 0, l = 0, h = num.length - 1;
    
    while (l <= h) {
        mid = (l + h) / 2;
        if ( mid!=num.length-1 && num[mid] > num[mid + 1])
            return mid;
         if (mid!=0 && num[mid] < num[mid - 1])
            return (mid-1);

            if(num[l]==num[mid] && num[mid]==num[h]){
                if(mid!=num.length-1 &&num[l] > num[l + 1])
                    return l;
                l++;
                if(mid!=0 && num[h] < num[h - 1])
                    return h-1;
                h--;
            }
               
            else if(num[l]<num[mid] || (num[l]==num[mid] && num[mid]>num[h]))
                l=mid+1;
            else
            {
                h=mid-1;
            }  
    }    
    return -1;
    }
  
}